#!/usr/bin/env tclsh8.5
#
# ps3mfw -- PS3 MFW creator
#
# Copyright (C) Anonymous Developers (Code Monkeys)
#
# This software is distributed under the terms of the GNU General Public
# License ("GPL") version 3, as published by the Free Software Foundation.
#
set ::PS3MFW_VERSION "0.2.1"

# Option --341-CEX: 3.41 CEX Base Firmware (-> 3.41 CEX tarball version)
# Option --355-CEX: 3.55 CEX Base Firmware (-> 3.55 CEX tarball version)
# Option --3XX-DEX: 3.xx DEX Base Firmware (-> 3.xx DEX tarball version)
# Option --4XX-CEX: 4.xx CEX Base Firmware (-> 4.xx CEX tarball version)
# Option --4XX-DEX: 4.xx DEX Base Firmware (-> 4.xx DEX tarball version)
# Option --3XX-DEH: 3.xx DECR Base Firmware (-> 3.xx DECR tarball version)
# Option --4XX-DEH: 4.xx DECR Base Firmware (-> 4.xx DECR tarball version)
# Option --tool-debug: Enable TOOL(s) DEBUG mode
# Option --task-verbose: Show verbose TASK output
# Option --debug-log: Show verbose DEBUGGING information
# Option --build-dir: Build directory for temporary files
# Option --auto-cos: Extract / Modify / Repack LV0	(MFW 3.6+ only)
# Option --debug-console: Show console
# Option --dev3: Extract devflash3
# Option --silent: Disable log output 

array set ::options {
	--341-CEX false
	--355-CEX false
	--3XX-DEX false
	--4XX-CEX false
	--4XX-DEX false
	--3XX-DEH false
	--4XX-DEH false
	--tool-debug true
	--task-verbose true			
	--debug-log true
	--build-dir ""
	--gui true	
	--auto-cos false
	--debug-console false
	--dev3 false
	--silent false
}

#
# End of configuration section.
#

set ::PUP "pup"
set ::LV0TOOL "lv0tool.exe"
set ::PKGTOOL "pkgtool.exe"
set ::PATCHTOOL "patchtool.exe"
set ::SCETOOL "scetool"
set ::RCOMAGE "rcomage"
set ::OFW_2NDGEN_BASE "3.56"
set ::NEWMFW_VER "000"
set ::SELF ""
set ::SUF ""
set ::CFW 0
set ::OFW_MAJOR_VER 0
set ::OFW_MINOR_VER 0
set ::FLAG_PATCH_USE_PATCHTOOL	1
set ::FLAG_PATCH_FILE_NOPATCH 0
set ::FLAG_PATCH_FILE_MULTI 0
set ::FLAG_NO_LV1LDR_CRYPT 0
set ::FLAG_COREOS_UNPACKED 0
set ::FLAG_4xx_LV0_UNPACKED 0
set ::AUTOCOS "0"
set ::SIGNSELF "0"
set ::SIGNISO "0"
set ::UNPKG "new_unpkg"
set ::NEWPKG "new_pkg"
set ::SPKG "spkg"
set ::ISOS ""
set ::PUPPACK "puppack"
set ::PUPUNPACK "pupunpack"
set ::COSPKG "cospkg"
set ::COSUNPKG "cosunpkg"
set ::PKG "pkg"
set ::LV0SELF "lv0"
set ::LV0OLD "appldr isoldr lv1ldr lv2ldr"
set ::LV0NEW "appldr.self isoldr.self lv1ldr.self lv2ldr.self"
set ::ISOSELF {aim_spu_module.self appldr.self isoldr.self lv1ldr.self lv2ldr.self manu_info_spu_module.self mc_iso_spu_module.self me_iso_for_ps2emu.self me_iso_spu_module.self sb_iso_spu_module.self sc_iso.self spp_verifier.self spu_pkg_rvk_verifier.self spu_token_processor.self spu_utoken_processor.self sv_iso_for_ps2emu.self sv_iso_spu_module.self}
set ::LV12 {lv1.self lv2_kernel.self lv2Ckernel.self lv2Dkernel.self}
set ::LV1 "lv1.self"
set ::LV2 "lv2_kernel.self"
set ::LV2C "lv2Ckernel.self"
set ::LV2D "lv2Dkernel.self"
set ::HC "hc.exe"
set ::ST2 "sys/stage2.bin"
set ::ST2RBG "rebug/cobra/stage2.cex.bak rebug/cobra/stage2.dex.bak"
set ::341_CEX "0"
set ::355_CEX "0"
set ::3XX_DEX "0"
set ::4XX_CEX "0"
set ::4XX_DEX "0"
set ::3XX_DEH "0"
set ::4XX_DEH "0"

if {$::options(--341-CEX)} {
	set ::341_CEX "1"
} else {
	set ::341_CEX "0"
}

if {$::options(--355-CEX)} {
	set ::355_CEX "1"
} else {
	set ::355_CEX "0"
}

if {$::options(--3XX-DEX)} {
	set ::3XX_DEX "1"
} else {
	set ::3XX_DEX "0"
}

if {$::options(--4XX-CEX)} {
	set ::4XX_CEX "1"
} else {
	set ::4XX_CEX "0"
}

if {$::options(--4XX-DEX)} {
	set ::4XX_DEX "1"
} else {
	set ::4XX_DEX "0"
}

if {$::options(--3XX-DEH)} {
	set ::3XX_DEH "1"
} else {
	set ::3XX_DEH "0"
}

if {$::options(--4XX-DEH)} {
	set ::4XX_DEH "1"
} else {
	set ::4XX_DEH "0"
}

if {$::options(--auto-cos)} {
	set ::AUTOCOS "1"
} else {
	set ::AUTOCOS "0"
}

set ::SIGNISO "0"

set ::SIGNSELF "0"



set ::PS3MFW_DIR [file dirname [info script]]
set ::program [file tail [info script]]

while {[catch {file readlink [file join ${::PS3MFW_DIR} ${::program}]} program] == 0} {
	if {[file pathtype ${::program}] == "absolute"} {
		set ::PS3MFW_DIR [file dirname ${::program}]
	} else {
		set ::PS3MFW_DIR [file join ${::PS3MFW_DIR} [file dirname ${::program}]]
	}

	set ::program [file tail ${::program}]
}

set ::auto_path [linsert ${::auto_path} 0 ${::PS3MFW_DIR}]
if { $::tcl_platform(platform) == "windows"} {
	append ::env(PATH) ";[file nativename [file join ${::PS3MFW_DIR} tools]]"
} else {
	append ::env(PATH) ":[file join ${::PS3MFW_DIR} tools]"
}

source [file join ${::PS3MFW_DIR} xml.tcl]
source [file join ${::PS3MFW_DIR} tar.tcl]
source [file join ${::PS3MFW_DIR} ps3mfw_base.tcl]
source [file join ${::PS3MFW_DIR} ps3mfw_tasks.tcl]

set ::xmlang [::xml::LoadFile [file join $::PS3MFW_DIR Settings.xml]]

if {[file exists [::xml::GetData ${::xmlang} "Settings:PS3_KEYS" 0]]} {
	set ::env(PS3_KEYS) [::xml::GetData ${::xmlang} "Settings:PS3_KEYS" 0]
} else {
	set ::env(PS3_KEYS) " "
}

set ::TASKS_DIR [file join ${::PS3MFW_DIR} tasks]

set ::taskfiles [get_sorted_task_files]
set ::tasks [list]
set ::taskname ""
set ::arguments [list]
set ::current_opt ""
set ::current_task_opt ""

foreach taskfile ${::taskfiles} {
	source ${::taskfile}
}

foreach arg ${::argv} {
	if {${::current_opt} != ""} {
		if {![string match "--*" ${::arg}]} {
			set ::options(${::current_opt}) ${::arg}
			set ::current_opt ""
		} else {
			usage "Invalid option: ${::arg}, expected value.\n"
		}
	} elseif {${::current_task_opt} != ""} {
		if {![string match "--*" ${::arg}]} {
			set ::${::taskname}::options(${::current_task_opt}) ${::arg}
			set ::current_task_opt ""
		} else {
			usage "Invalid option: ${::arg}, expected value.\n"
		}
	} else {
		if {[string match "--*" ${::arg}]} {
			if {[info exists ::options(${::arg})]} {
				set ::current_opt ${::arg}
			} else {
				set ::task [string map {- _} [string range ${::arg} 2 end]]
				if {[namespace exists ${::task}]} {
					lappend tasks "${::task}"
					set ::taskname ${::task}
				} elseif {[info exists ::${::taskname}::options(${::arg})]} {
					set ::current_task_opt ${::arg}
				} else {
					usage "Invalid option: ${::arg}, expected task.\n"
				}
			}
		} else {
			lappend arguments ${::arg}
		}
	}
}

if {${::current_opt} != ""} {
	usage "Option ${::current_opt} needs a value\n"
} elseif {${::current_task_opt} != ""} {
	usage "Option ${::current_task_opt} needs a value\n"
}

if {[llength ${::tasks}] == 0 } {
	set ::tasks [list 00_change_cos_files]
	foreach task ${::tasks} {
		source [file join ${::TASKS_DIR} ${::task}.tcl]
	}
}

if {$::options(--build-dir) != ""} {
	set ::BUILD_DIR $::options(--build-dir)
} else {
	if { $::tcl_platform(platform) == "windows" && [info exists ::env(TEMP)]} {
		if {[file exists [::xml::GetData ${::xmlang} "Settings:BUILD_DIR" 0]]} {
			set ::BUILD_DIR [::xml::GetData ${::xmlang} "Settings:BUILD_DIR" 0]
		} else {
			set ::BUILD_DIR [file join $::env(TEMP) PS3MFW]
		}
		if {[catch {file mkdir ${::BUILD_DIR}}]} {
			set ::BUILD_DIR [pwd]
		}
	} elseif {$::tcl_platform(platform) == "unix"} {
		if {[file exists [::xml::GetData ${::xmlang} "Settings:BUILD_DIR" 0]]} {
			set ::BUILD_DIR [::xml::GetData ${::xmlang} "Settings:BUILD_DIR" 0]
		} else {
			set ::BUILD_DIR [file join /tmp PS3MFW]
		}
		if {[catch {file mkdir ${::BUILD_DIR}}]} {
			set ::BUILD_DIR [pwd]
		}
	} else {
		set ::BUILD_DIR [pwd]
	}
}
unset ::options(--build-dir)

#### ----------------------------------------------------------------------------- ####
####		**** SETUP ALL THE MAIN VARIABLES FOR MFW CREATION ****				   ####
#### ----------------------------------------------------------------------------- ####

set ::ORIGINAL_PUP_DIR [file join ${::BUILD_DIR} PS3MFW-OFW]
set ::CUSTOM_PUP_DIR [file join ${::BUILD_DIR} PS3MFW-MFW]
set ::LOG_FILE [file join ${::BUILD_DIR} "[file rootname [file tail ${::argv0}]].log"]

# ORIGINAL (OFW) base files
set ::ORIGINAL_VERSION_TXT [file join ${::ORIGINAL_PUP_DIR} version.txt]
set ::ORIGINAL_LICENSE_XML [file join ${::ORIGINAL_PUP_DIR} license.xml]
set ::ORIGINAL_PROMO_FLAGS_TXT [file join ${::ORIGINAL_PUP_DIR} promo_flags.txt]
set ::ORIGINAL_UPDATE_FLAGS_TXT [file join ${::ORIGINAL_PUP_DIR} update_flags.txt]
set ::ORIGINAL_PS3SWU_SELF [file join ${::ORIGINAL_PUP_DIR} ps3swu.self]
set ::ORIGINAL_PS3SWU2_SELF [file join ${::ORIGINAL_PUP_DIR} ps3swu2.self]
set ::ORIGINAL_SPKG_TAR [file join ${::ORIGINAL_PUP_DIR} spkg_hdr.tar]
set ::ORIGINAL_UPDATE_TAR [file join ${::ORIGINAL_PUP_DIR} update_files.tar]
set ::ORIGINAL_SPKG_DIR [file join ${::ORIGINAL_PUP_DIR} spkg_hdr]
set ::ORIGINAL_UPDATE_DIR [file join ${::ORIGINAL_PUP_DIR} update_files]
set ::ORIGINAL_PKG_DIR [file join ${::ORIGINAL_UPDATE_DIR} CORE_OS_PACKAGE.pkg]
set ::ORIGINAL_UNPKG_DIR [file join ${::ORIGINAL_UPDATE_DIR} CORE_OS_PACKAGE.unpkg]
set ::ORIGINAL_COSUNPKG_DIR [file join ${::ORIGINAL_UPDATE_DIR} CORE_OS_PACKAGE]
set ::ORIGINAL_UPDATE_FLAGS_TXT [file join ${::ORIGINAL_PUP_DIR} update_flags.txt]

# update (MFW) base files
set ::CUSTOM_VERSION_TXT [file join ${::CUSTOM_PUP_DIR} version.txt]
set ::CUSTOM_LICENSE_XML [file join ${::CUSTOM_PUP_DIR} license.xml]
set ::CUSTOM_PROMO_FLAGS_TXT [file join ${::CUSTOM_PUP_DIR} promo_flags.txt]
set ::CUSTOM_UPDATE_FLAGS_TXT [file join ${::CUSTOM_PUP_DIR} update_flags.txt]
set ::CUSTOM_PS3SWU_SELF [file join ${::CUSTOM_PUP_DIR} ps3swu.self]
set ::CUSTOM_PS3SWU2_SELF [file join ${::CUSTOM_PUP_DIR} ps3swu2.self]
set ::CUSTOM_SPKG_TAR [file join ${::CUSTOM_PUP_DIR} spkg_hdr.tar]
set ::CUSTOM_UPDATE_TAR [file join ${::CUSTOM_PUP_DIR} update_files.tar]
set ::CUSTOM_SPKG_DIR [file join ${::CUSTOM_PUP_DIR} spkg_hdr]
set ::CUSTOM_UPDATE_DIR [file join ${::CUSTOM_PUP_DIR} update_files]
set ::CUSTOM_PKG_DIR [file join ${::CUSTOM_UPDATE_DIR} CORE_OS_PACKAGE.pkg]
set ::CUSTOM_UNPKG_DIR [file join ${::CUSTOM_UPDATE_DIR} CORE_OS_PACKAGE.unpkg]
set ::CUSTOM_COSUNPKG_DIR [file join ${::CUSTOM_UPDATE_DIR} CORE_OS_PACKAGE]

# update_files.tar pkg files (OFW & MFW)
set ::CUSTOM_DEVFLASH_DIR [file join ${::CUSTOM_UPDATE_DIR} dev_flash]
set ::ORIGINAL_DEVFLASH_DIR [file join ${::ORIGINAL_UPDATE_DIR} dev_flash]
set ::CUSTOM_UPLXML_DIR [file join ${::CUSTOM_UPDATE_DIR} UPL.xml]
set ::CUSTOM_DEVFLASH3_DIR [file join ${::CUSTOM_UPDATE_DIR} dev_flash3]
set ::ORIGINAL_DEVFLASH3_DIR [file join ${::ORIGINAL_UPDATE_DIR} dev_flash3]

# custom dirs
set ::TOOLS_DIR [file join ${::PS3MFW_DIR} tools]
set ::HASH_DIR [file join ${::BUILD_DIR} hashes]
set ::CUSTOM_TEMPLAT_DIR [file join ${::PS3MFW_DIR} templat]
set ::CUSTOM_GAMEBOOT_DIR [file join ${::CUSTOM_TEMPLAT_DIR} gameboot]
set ::CUSTOM_IMG_DIR [file join ${::CUSTOM_TEMPLAT_DIR} imgs]
set ::CUSTOM_TEMPLAT_RAF [file join ${::CUSTOM_TEMPLAT_DIR} coldboot_raf]
set ::CUSTOM_TEMPLAT_AC3 [file join ${::CUSTOM_TEMPLAT_DIR} coldboot_ac3]
set ::QRCBASE [file join ${::CUSTOM_TEMPLAT_DIR} lines.qrc]
set ::CUSTOM_DEV2_DIR [file join ${::CUSTOM_DEVFLASH_DIR} dev_flash]
set ::CUSTOM_DEV3_DIR [file join ${::CUSTOM_DEVFLASH3_DIR} dev_flash3]
set ::CUSTOM_DEV_MODULE [file join ${::CUSTOM_DEV2_DIR} vsh module]
set ::CUSTOM_DEV_RES [file join ${::CUSTOM_DEV2_DIR} vsh resource]
set ::CUSTOM_MFW_DIR [file join ${::CUSTOM_DEV2_DIR} mfw]
set ::C_PS3_GAME [file join ${::CUSTOM_TEMPLAT_DIR} PS3_GAMES]
set ::C_PS3_GAME_AC1D [file join ${::C_PS3_GAME} ac1d]
set ::C_PS3_GAME_ROG [file join ${::C_PS3_GAME} rog]
set ::CUSTOM_PS3_GAME [file join ${::C_PS3_GAME_ROG} PS3_GAME]
set ::CUSTOM_PS3_GAME2 [file join ${::C_PS3_GAME_AC1D} PS3_GAME]
set ::DCINAVIA [file join ${::CUSTOM_TEMPLAT_DIR} videoplayer_plugin.sprx]
set ::RCINAVIA [file join ${::CUSTOM_DEV_MODULE} videoplayer_plugin.sprx]

# modification files
set ::CUSTOM_UPL_XML [file join ${::CUSTOM_UPLXML_DIR} UPL.xml]

# version info
set ::PUP_BUILD ""


#### ----------------------------------------------------------------------------- ####
####		**** BEGIN THE MFW CREATION PROCESS ****				   			   ####
#### ----------------------------------------------------------------------------- ####

if {$options(--gui)} {
	package require Tk 8.5
	foreach font [font names] {
		font configure ${::font} -family Helvetica
	}
	if { [info proc console] == "" && [info command console] == "" } {
		source [file join ${::PS3MFW_DIR} console.tcl]
		console hide
	}
	if {$::options(--debug-log)} {
		console hide
	}
	if {$::options(--debug-console)} {
		console show
	}
	unset ::options(--debug-console)

	source [file join ${::PS3MFW_DIR} ps3mfw_gui.tcl]
	source [file join ${::PS3MFW_DIR} scrolledframe.tcl]
	source [file join ${::PS3MFW_DIR} tracedtext.tcl]
	::gui::create_gui ${::arguments} ${::tasks}
} else {
	if {[llength ${::arguments}] != 2} {
		# exits
		usage
	}

	set ::IN_FILE [lindex ${::arguments} 0]
	set ::OUT_FILE [lindex ${::arguments} 1]	

	build_mfw ${::IN_FILE} ${::OUT_FILE} ${::tasks}
	exit
}

#### ----------------------------------------------------------------------------- ####
####		**** MFW CREATION PROCESS COMPLETE!!! ****				   			   ####
#### ----------------------------------------------------------------------------- ####
